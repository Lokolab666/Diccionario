import java.util.ArrayList;

public class Binario {
	
    private Nodo raiz;
    Nodo NodoBusqueda = null;
    Nodo NodoBusquedaPadre = null;

    public Binario() {
            raiz = null;
    }

    public int insertarDato(String palabra, String ingles, String significado) {
		Nodo p, q;
		if(raiz == null) {
			raiz = new Nodo(palabra, ingles, significado);
			return 1;
		}
		p = q = raiz;
		while(q != null && !p.palabra.equals(palabra)) {
			p = q;
			if(palabra.compareTo(p.palabra) < 0) {
				q = q.izq;
			}else {
				q = q.der;
			}
		}
		if(p.palabra.compareTo(palabra) == 0) {
			return -1;
		}
		else if(palabra.compareTo(p.palabra) < 0) {
			insIzq(p, palabra, ingles, significado);
		}
		else{
			insDer(p, palabra, ingles, significado);
		}
		return 1;
	}
        
    public void buscarPalabra(String palabra){
        busqueda(palabra);
        if(NodoBusqueda == null){
            System.out.println("No se encontro la palabra");
        } else {
            System.out.print(NodoBusqueda.palabra + " (" + NodoBusqueda.ingles + ")\n" + NodoBusqueda.significado);
        }
        resetBusqueda();
    }
    
    public void resetBusqueda(){
        this.NodoBusqueda = null;
    }
    
    public void busqueda(String palabra) {
        busqueda(raiz, palabra);
    }
    private void busqueda(Nodo reco, String palabra) {
        if (reco != null) {
            busqueda(reco.izq,palabra);
            if(reco.palabra.equals(palabra)){
                this.NodoBusqueda = reco;
            }
            busqueda(reco.der,palabra);
        }
    }
    
    public void busquedaPadre(String palabra) {
        busquedaPadre(raiz, palabra);
    }
    private void busquedaPadre(Nodo reco, String palabra) {
        if (reco != null) {
            System.out.println(reco.izq.palabra);
            
            if(reco.der != null){
                if(reco.der.palabra.equals(palabra)){
                    this.NodoBusquedaPadre = reco;
                    return;
                }
            }
            if(reco.izq != null){
                if(reco.izq.palabra.equals(palabra)){
                    this.NodoBusquedaPadre = reco;
                    return;
                }
            }
            busqueda(reco.izq,palabra);
            busqueda(reco.der,palabra);
        }
    }
        
    public ArrayList<String> recorrerLetra(char letra){
        return inOrden(letra);
    }
    public ArrayList<String> recorrer(){
        return inOrden();
    }
        
    public ArrayList<String> inOrden() {
        ArrayList l=new ArrayList();
        inOrden(raiz,l);
        return l;
    }
    public ArrayList<String> inOrden(char letra) {
        ArrayList l=new ArrayList();
        inOrden(raiz,l, letra);
        return l;
    }

    private void inOrden(Nodo reco,ArrayList l) {
        if (reco != null) {
            inOrden(reco.izq,l);
            l.add(reco.palabra);
            inOrden(reco.der,l);
        }
    }
    private void inOrden(Nodo reco,ArrayList l, char letra) {
        if (reco != null) {
            inOrden(reco.izq,l,letra);
            if(reco.palabra.charAt(0) == letra){
                System.out.print(reco.palabra.charAt(0) + "  " + letra);
                l.add(reco.palabra);
            }
            inOrden(reco.der,l, letra);
        }
    }
        
    public void borrarRaiz(){
        Nodo r, q, t;

        r = raiz.der;
        t  = r;

        if(t == null){
            raiz = raiz.izq;
            return;
        }

        while(r.izq != null) {
            t = r;
            r = r.izq;

        }

        if(t == r){
            r.izq = raiz.izq;
            raiz = r;
        } else {
            t.izq = r.der;
            r.der = raiz.der;
            r.izq = raiz.izq;
            raiz = r; 
        }
    }
	
    public Nodo borrarDato(Nodo q, Nodo p) {
            Nodo r,t,s;

            if(p.izq == null) {
                    r = p.der;
            }
            else if(p.der == null) {
                    r = p.izq;
            }
            else {
                    s = p;
                    r = p.der;
                    t = r.izq;

                    while(t != null) {
                            s = r;
                            r = t;
                            t = t.izq;
                    }
                    if(p != s) {
                            s.izq = r.der; 
                            r.der = p.der;
                    }
                    r.izq = p.izq;
            }
            if(q == null) {
                    raiz = r;
                    return raiz;
            }
            else if(p == q.izq) {
                    q.izq = r;
                    return q.izq;
            }
            else {
                    q.der = r;
                    return q.der;
            }

    }
	
    public void insIzq(Nodo p, String palabra, String ingles, String significado) {
            Nodo nuevo = new Nodo(palabra, ingles, significado);
            p.izq = nuevo;
    }

    public void insDer(Nodo p, String palabra, String ingles, String significado) {
            Nodo nuevo = new Nodo(palabra, ingles, significado);
            p.der = nuevo;
    }

    public Nodo returnRaiz() {
            return raiz;
    }       
    
}
